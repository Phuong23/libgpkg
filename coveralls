#!/usr/bin/env ruby

require 'json'
require 'net/http'
require 'pathname'
require 'uri'

def gitlog(fmt)
  `git --no-pager log -1 --pretty=format:#{fmt}`
end

def gitroot()
  `git rev-parse --show-toplevel`.strip
end

def gitbranch()
  `git rev-parse --abbrev-ref HEAD`.strip
end

def gitremotes()
  `git remote -v`.lines.find_all { |l| l.index '(fetch)' }.map { |l| { 'name' => l.split[0], 'url' => l.split[1] } }
end

repo_root = Pathname.new(gitroot)

# Generate gcov reports
ARGV.each do |dir|
  Dir["#{File.expand_path(dir)}/**/*.gcno"].each do |gcno|
    object_file = "#{File.dirname(gcno)}/#{File.basename(gcno, '.gcno')}.o"
    `gcov #{object_file}`
  end
end

# Convert gcov reports to coveralls report
source_files = []
Dir["#{Dir.pwd}/*.gcov"].each do |gcov|
  source_file = ''
  src = ''
  cov = []
  gcov_line = /([^\:]+)\:([^\:]+)\:(.*)/
  File.foreach(gcov) do |line|
    match = gcov_line.match(line)
    next unless match
    
    exec_count = match[1].strip
    line_no = match[2].strip.to_i
    source_line = match[3]
    if line_no == 0
      tag,info = source_line.split(':', 2)
      source_file = info.strip if tag == 'Source'
    else
      src << '\n' unless src.empty?
      src << source_line
      if exec_count.index('#') || exec_count.index('=')
        cov << nil
      else
        cov << exec_count.to_i
      end
    end
  end
  
  source_files << {
    'name' => Pathname.new(source_file).relative_path_from(repo_root).to_s,
    'source' => src,
    'coverage' => cov
  } 
end

report = {
  'service_name' => 'travis-ci',
  'service_job_id' => ENV['TRAVIS_JOB_ID'],
  'git' => {
    'head' => {
      'id' => gitlog('%H'),
      'author_name' => gitlog('%aN'),
      'author_email' => gitlog('%ae'),
      'committer_name' => gitlog('%cN'),
      'committer_email' => gitlog('%ce'),
      'message' => gitlog('%s'),
    },
    'branch' => ENV['TRAVIS_BRANCH'] || gitbranch,
    'remotes' => gitremotes
  },
  'source_files' => source_files,
  'run_at' => Time.now.utc.to_s
}

File.open('report.json', 'w') do |f|
  JSON.dump(report, f)
end

`curl -v -F "json_file=@report.json" https://coveralls.io/api/v1/jobs`
